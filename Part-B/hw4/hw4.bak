
#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file

;; put your code below
(define ones (lambda () (cons 1 ones)))

(define (sequence low high stride)
  (if (< high low)
      null
      (cons low (sequence (+ low stride) high stride))))

(define (string-append-map xs suffix)
  (map (lambda (str) (string-append str suffix)) xs))
  
(define (list-nth-mod xs n)
  (cond [(> 0 n) (error "list-nth-mod: negative number")]
        [(null? xs) (error "list-nth-mod: empty list")]
        [#t (car (list-tail xs (remainder n (length xs))))]))

(define (stream-for-n-steps s n)
  (if (= n 0)
      null
      (let ((x (s)))
        (cons (car x) (stream-for-n-steps (cdr x) (- n 1))))))


(define funny-number-stream
  (letrec ((funny-number
         (lambda(n)
           (lambda()
             (if (= (remainder n 5) 0)
                 (cons (- 0 n) (funny-number (+ n 1)))
                 (cons n (funny-number (+ n 1))))))))
    (funny-number 1)))

(define dan-then-dog
  (lambda()
    (cons "dan.jpg" (lambda() (cons "dog.jpg" dan-then-dog)))))

(define (stream-add-zero s)
  (let ((result (s))) 
  (lambda()
     (cons (cons 0 (car result)) (stream-add-zero (cdr result))))))

(define (cycle-lists xs ys)
  (letrec ((cycle
            (lambda(n)
              (lambda()
                (cons (cons (list-nth-mod xs n) (list-nth-mod ys n)) (cycle (+ 1 n)))))))
    (cycle 0)))
                            
      
(define (vector-assoc v vec)
  (letrec ((vector-iterate
            (lambda(n)
              (if (>= n (vector-length vec))
                  #f
                  (let ((current-element (vector-ref vec n)))
                    (if (and (pair? current-element) (equal? (car current-element) v))
                        current-element
                        (vector-iterate (+ 1 n))))))))
    (vector-iterate 0)))

(define (cached-assoc xs n)
  (lambda (v)
    (letrec([memo (make-vector n #f)]
            [index 0]
            [result (vector-assoc v memo)])
            (if (pair? result)
                (car result)
                (let([ans (assoc v xs)])
                  (begin
                    (vector-set! memo index ans)
                    (set! index (modulo n (+ 1 index)))
                    ans))))))
            
                
                